@model LoginModel
@using WCore.Core
@using WCore.Core.Domain.Users

@inject IWebHelper webHelper
@{

    var _workContext = EngineContext.Current.Resolve<IWorkContext>();
    var _themeContext = EngineContext.Current.Resolve<IThemeContext>();
    var _storeInformationSettings = EngineContext.Current.Resolve<StoreInformationSettings>();
    var _seoSettings = EngineContext.Current.Resolve<SeoSettings>();

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register", new { returnUrl = this.Context.Request.Query["returnUrl"] }, webHelper.CurrentRequestProtocol);
}
<section class="page-section-ptb bg-overlay-white-70 login-signup parallax" style="background: url(@_storeInformationSettings.BgImage);">
    <div class="container">
        <div class="row no-gutter">
            <div class="col-md-12">
                <div class="login-box">
                    @if (Model.RegistrationType == UserRegistrationType.Disabled)
                    {
                        <div class="new-wrapper">
                            <div class="title">
                                @T("Account.Register")
                            </div>
                            <div class="text">
                                @T("Account.Register.Result.Disabled")
                            </div>
                        </div>
                    }
                    else if (Model.CheckoutAsGuest)
                    {
                        <div class="new-wrapper checkout-as-guest-or-register-block">
                            <div class="title">
                                <strong>@T("Account.Login.CheckoutAsGuestOrRegister")</strong>
                            </div>
                            <div class="text">
                                @*@await Component.InvokeAsync("TopicBlock", new { systemName = "CheckoutAsGuestOrRegister" })*@
                            </div>
                            <div class="buttons">
                                <input type="button" class="button-1 checkout-as-guest-button" onclick="location.href='@Url.RouteUrl("Checkout")'" value="@T("Account.Login.CheckoutAsGuest")" />
                                <input type="button" class="button-1 register-button" onclick="location.href='@registerUrl'" value="@T("Account.Register")" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="new-wrapper register-block">
                            <div class="title">
                                <strong>@T("Account.Login.NewUser")</strong>
                            </div>
                            <div class="text">
                                @T("Account.Login.NewUserText")
                            </div>
                            <div class="buttons">
                                <input type="button" class="button-1 register-button" onclick="location.href='@registerUrl'" value="@T("Account.Register")" />
                            </div>
                        </div>
                    }
                    <div class="returning-wrapper fieldset">
                        <form asp-route="Login" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" autocomplete="off">
                            <div asp-validation-summary="ModelOnly" class="message-error">@T("Account.Login.Unsuccessful")</div>
                            <div class="title">
                                <strong>@T("Account.Login.ReturningUser")</strong>
                            </div>
                            <div class="form-fields">
                                @if (Model.UsernamesEnabled)
                                {
                                    <div class="inputs">
                                        <label asp-for="Username" asp-postfix=":"></label>
                                        <input asp-for="Username" class="username" autofocus="autofocus" />
                                        <span asp-validation-for="Username"></span>
                                    </div>
                                }
                                else
                                {
                                    <div class="inputs">
                                        <label asp-for="Email" asp-postfix=":"></label>
                                        <input asp-for="Email" class="email" autofocus="autofocus" />
                                        <span asp-validation-for="Email"></span>
                                    </div>
                                }
                                <div class="inputs">
                                    <label asp-for="Password" asp-postfix=":"></label>
                                    <input asp-for="Password" class="password" />
                                    <span asp-validation-for="Password"></span>
                                </div>
                                <div class="inputs reversed">
                                    <input asp-for="RememberMe" />
                                    <label asp-for="RememberMe"></label>
                                    <span class="forgot-password">
                                        <a asp-route="PasswordRecovery">@T("Account.Login.ForgotPassword")</a>
                                    </span>
                                </div>
                                @if (Model.DisplayCaptcha)
                                {
                                    <WCore-captcha />
                                }
                            </div>
                            <div class="buttons">
                                <input class="button-1 login-button" type="submit" value="@T("Account.Login.LoginButton")" />
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>