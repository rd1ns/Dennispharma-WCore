@model UserAgencyModel
@{
    ViewData["PageMainTitle"] = T("Admin.Configuration.UserAgencies.Title");
    ViewData["PageTitle"] = Model.Id == 0 ? T("Admin.Configuration.UserAgencies.Add") : T("Admin.Configuration.UserAgencies.Edit");
    ViewData["SystemTitle"] = ViewData["PageTitle"] + " / " + ViewData["PageMainTitle"];
    ViewData["ControllerName"] = "UserAgency";

    if (Model.Id == 0)
    {
        Model.CreatedOn = DateTime.Now;
        Model.UpdatedOn = DateTime.Now;
        Model.IsActive = true;
        Model.Deleted = false;
    }
    else
    {
        Model.UpdatedOn = DateTime.Now;
    }
}
<div class="content  d-flex flex-column flex-column-fluid" id="kt_content">
    <div class="subheader py-2 py-lg-6  subheader-solid " id="kt_subheader">
        <div class=" container-fluid  d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
            <div class="d-flex align-items-center flex-wrap mr-1">
                <div class="d-flex align-items-baseline flex-wrap mr-5">
                    <h5 class="text-dark font-weight-bold my-1 mr-5">
                        @ViewData["PageTitle"]
                    </h5>
                    <ul class="breadcrumb breadcrumb-transparent breadcrumb-dot font-weight-bold p-0 my-2 font-size-sm">
                        <li class="breadcrumb-item">
                            <a href="/admin/@ViewData["ControllerName"]" class="text-muted">
                                @ViewData["PageMainTitle"]
                            </a>
                        </li>
                        <li class="breadcrumb-item">
                            @if (Model.Id == 0)
                            {
                                <b>@T("admin.common.new")</b>
                            }
                            else
                            {
                                @Model.Name
                            }
                        </li>
                    </ul>
                </div>
            </div>
            <div class="d-flex align-items-center">
                <partial name="_AddOrEditHeaderButtons" model="@Tuple.Create(Model.Id,"UserAgencyForm")" />
            </div>
        </div>
    </div>
    <div class="d-flex flex-column-fluid">
        <div class="container-fluid">
            <div class="card card-custom">
                <div class="card-body">
                    <WCore-tabs id="skiresort-edit" asp-tab-name-to-select="tab-details" asp-render-selected-tab-input="false">
                        <WCore-tab asp-name="tab-details" asp-title="@T("Admin.Configuration.Details")">
                            <form id="UserAgencyForm" asp-action="AddOrEdit" asp-controller="@ViewData["ControllerName"]" enctype="multipart/form-data">
                                <div class="card card-custom">
                                    <div class="card-body">
                                        <div class="col-xl-12 my-2">
                                            <div class="form-group row">
                                                <WCore-label asp-for="Name" />
                                                <div class="col-lg-10 col-md-6 col-sm-12">
                                                    <WCore-editor asp-for="Name" asp-required="true" asp-type="form-control form-control-sm form-control-solid" />
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <WCore-label asp-for="CreatedOn" />
                                                <div class="col-lg-10 col-md-6 col-sm-12">
                                                    <WCore-editor asp-for="CreatedOn" asp-required="true" asp-type="form-control-sm form-control-solid" />
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <WCore-label asp-for="UpdatedOn" />
                                                <div class="col-lg-10 col-md-6 col-sm-12">
                                                    <WCore-editor asp-for="UpdatedOn" asp-required="true" asp-type="form-control-sm form-control-solid" />
                                                </div>
                                            </div>
                                            <div class="form-group mb-0 row">
                                                <WCore-label asp-for="IsActive" />
                                                <div class="col-lg-10 col-md-6 col-sm-12">
                                                    <div class="checkbox-inline">
                                                        <label class="checkbox pt-3">
                                                            <input asp-for="IsActive" />
                                                            <span></span>
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group mb-0 row">
                                                <WCore-label asp-for="Deleted" />
                                                <div class="col-lg-10 col-md-6 col-sm-12">
                                                    <div class="checkbox-inline">
                                                        <label class="checkbox pt-3">
                                                            <input asp-for="Deleted" />
                                                            <span></span>
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                            <!--end::Group-->
                                        </div>
                                    </div>
                                </div>
                                <input id="send-info" name="send-info" type="hidden" value="false" />
                                <input type="hidden" asp-for="Id" />
                            </form>
                        </WCore-tab>
                        <WCore-tab asp-name="tab-users" asp-title="@T("Admin.Configuration.Users")">
                            <div class="row mb-3">
                                <div class="col-xl-12 my-2">
                                    <div class="form-group row">
                                        <div class="col-form-label col-lg-2 col-md-8 col-sm-12 text-lg-right text-left">
                                            <label class="control-label" for="User_Query">@T("Admin.Configuration.Query")</label>
                                        </div>
                                        <div class="col-lg-10 col-md-4 col-sm-12">
                                            <input name="User_Query" id="User_Query" class="form-control form-control-sm form-control-solid" />
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-form-label col-lg-2 col-md-6 col-sm-12 text-lg-right text-left">
                                            <label class="control-label" for="User_IsActive">@T("Admin.Configuration.IsActive")</label>
                                        </div>
                                        <div class="col-lg-4 col-md-4 col-sm-12">
                                            <select class="form-control form-control-sm form-control-solid" id="User_IsActive" name="User_IsActive">
                                                <option value="">@T("Admin.Configuration.All")</option>
                                                <option value="true">@T("Admin.Configuration.True")</option>
                                                <option value="false">@T("Admin.Configuration.False")</option>
                                            </select>
                                        </div>
                                        <div class="col-form-label col-lg-2 col-md-6 col-sm-12 text-lg-right text-left">
                                            <label class="control-label" for="User_Deleted">@T("Admin.Configuration.Deleted")</label>
                                        </div>
                                        <div class="col-lg-4 col-md-4 col-sm-12">
                                            <select class="form-control form-control-sm form-control-solid" id="User_Deleted" name="User_Deleted">
                                                <option value="">@T("Admin.Configuration.All")</option>
                                                <option value="true">@T("Admin.Configuration.True")</option>
                                                <option value="false">@T("Admin.Configuration.False")</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <div class="col-12 text-right">
                                            <button class="btnDisableable btn btn-default btn-sm" type="button" id="btnClearSearch"><i class="fa fa-broom"></i> @T("admin.common.clearsearch")</button>
                                            <button class="btnDisableable btn btn-primary btn-sm" type="button" id="btnSearch"><i class="fa fa-search"></i> @T("admin.common.search")</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="user_datatable"></div>
                        </WCore-tab>
                        <WCore-tab asp-name="tab-authorization" asp-title="@T("Admin.Configuration.Authorization")">
                            <div id="userAgencyAuthorization_datatable"></div>
                            <input type="hidden" name="SkiResortId"  id="SkiResortId" />
                            <input type="hidden" name="HotelId" id="HotelId" />
                            <input type="hidden" name="SkiSchoolId"  id="SkiSchoolId" />
                            <input type="hidden" name="RestaurantId" id="RestaurantId" />
                            <button type="button" id="btnAdd" class="btnDisableable btn btn-sm btn-success font-weight-bolder mr-2">
                                <i class="ki ki-plus icon-xs"></i>
                                @T("Admin.Configuration.AddNew")
                            </button>
                            <div class="row">
                                <div class="border col-lg-4 col-md-6 col-sm-12 pt-3 pb-3" id="skiResorts">
                                </div>
                                <div class="border col-lg-8 col-md-6 col-sm-12 pt-3 pb-3" id="others">
                                    <div id='hotels' class="mb-3"></div>
                                    <div id='skiSchools' class="mb-3"></div>
                                    <div id='restaurants' class="mb-3"></div>
                                </div>
                            </div>
                        </WCore-tab>
                    </WCore-tabs>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script>
        $(document).ready(function () {
            var userAgencyAuthorizationDatatable = $("#userAgencyAuthorization_datatable").kendoGrid({
                dataSource: {
                    type: "json",
                    transport: {
                        read: {
                            url: "/Admin/UserAgencyAuthorization/GetFilteredItems",
                            type: "POST",
                            dataType: "json",
                            data: UserAgencyAuthorizationData
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "RecordsFiltered",
                        errors: "Errors",
                        model: {
                            id: "Id",
                            fields: {
                                IsActive: { editable: true, type: "boolean" },
                                Deleted: { editable: true, type: "boolean" },
                                Id: { editable: false, type: "number" }
                            }
                        }
                    },
                    requestEnd: function (e) {
                        if (e.type == "create" || e.type == "update") {
                            this.read();
                        }
                    },
                    error: function (e) {
                        console.log(e);
                        this.cancelChanges();
                    },
                    pageSize: 10,
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    pageSizes: [10, 15, 20, 50, 100, 200, 300, 500, 1000, 3000],
                    @Html.Partial("_GridPagerMessages")
                },
                filterable: true,
                scrollable: false,
                columns: [
                    {
                        field: "IsRead",
                        title: "@T("Admin.Configuration.IsRead")",
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: '# if(IsRead) {# <span class="btn btn-sm btn-success">@T("admin.configuration.true")</span> #} else {# <span class="btn btn-sm btn-danger">@T("admin.configuration.false")</span> #} #',
                        width: 80,
                    },
                    {
                        field: "IsUpdate",
                        title: "@T("Admin.Configuration.IsUpdate")",
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: '# if(IsUpdate) {# <span class="btn btn-sm btn-success">@T("admin.configuration.true")</span> #} else {# <span class="btn btn-sm btn-danger">@T("admin.configuration.false")</span> #} #',
                        width: 80,
                    },
                    {
                        field: "IsCreate",
                        title: "@T("Admin.Configuration.IsCreate")",
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: '# if(IsCreate) {# <span class="btn btn-sm btn-success">@T("admin.configuration.true")</span> #} else {# <span class="btn btn-sm btn-danger">@T("admin.configuration.false")</span> #} #',
                        width: 80,
                    },
                    {
                        field: "IsDelete",
                        title: "@T("Admin.Configuration.IsDelete")",
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: '# if(IsDelete) {# <span class="btn btn-sm btn-success">@T("admin.configuration.true")</span> #} else {# <span class="btn btn-sm btn-danger">@T("admin.configuration.false")</span> #} #',
                        width: 80,
                    },
                    {
                        field: "Id",
                        title: "@T("admin.common.delete")",
                        width: 80,
                        filterable: false,
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: '<a href="javascript:void(0)" data-id="#=Id#" class="btn btn-sm btn-clean btn-icon btnDelete" title="Delete">\
                                        <i class="la la-trash"></i>\
                                    </a>'
                    }
                ]
            });
            $("body").on("click", "#userAgencyAuthorization_datatable .btnDelete", function () {
                Swal.fire({
                    title: 'Eminmisiniz?',
                    text: "Kaydı silmek istediğiniz eminmisiniz?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Evet',
                    cancelButtonText: 'Hayır',
                    timer: 3000,
                    timerProgressBar: true
                }).then((result) => {
                    if (result.value) {
                        var id = $(this).attr("data-id");
                        console.log(id);
                        $.ajax({
                            type: "POST",
                            url: '/admin/UserAgencyAuthorization/AddOrEdit',
                            data: { id: id, delete: true },
                            success: function (data) {
                                userAgencyAuthorizationDatatable.data("kendoGrid").dataSource.read();
                                Swal.fire({
                                    title: 'Başarılı',
                                    icon: 'success',
                                    showCancelButton: false,
                                    showConfirmButton: false,
                                    timer: 1000,
                                    timerProgressBar: true
                                });
                            },
                            error: function (d) {
                                console.log(d);
                            }
                        });
                    }
                })
            });
        });
        function UserAgencyAuthorizationData() {
            var data = {
                "UserAgencyId": @Model.Id,
            };
            addAntiForgeryToken(data);
            return data;
        }
    </script>
    <script>
        $("#UserAgencyForm").submit(function (e) {
            e.preventDefault();
            var data = new FormData();

            //Form data
            var form_data = $('#UserAgencyForm').serializeArray();
            $.each(form_data, function (key, input) {
                data.append(input.name, input.value);
            });

            var url = $(this).attr('action');
            var id = @Model.Id;

            $.ajax({
                type: "POST",
                url: "/admin/"+url,
                processData: false,
                contentType: false,
                data: data,
                success: function (data) {
                    if (id == 0) {
                        window.location.href = "/admin/@ViewData["ControllerName"]";
                    }
                    else {
                        Swal.fire({
                            title: '@T("admin.notification.success")',
                            text: "@T("admin.notification.editcontinue")",
                            icon: 'success',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Evet',
                            cancelButtonText: 'Hayır',
                            timer: 3000,
                            timerProgressBar: true
                        }).then((result) => {
                            if (!result.value) {
                                window.location.href = "/admin/@ViewData["ControllerName"]";
                            }
                        })
                    }
                }
            });
        });

        $(document).ready(function () {
            var userDatatable = $("#user_datatable").kendoGrid({
                dataSource: {
                    type: "json",
                    transport: {
                        read: {
                            url: "/Admin/User/GetFilteredItems",
                            type: "POST",
                            dataType: "json",
                            data: additionalData
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "RecordsFiltered",
                        errors: "Errors",
                        model: {
                            id: "Id",
                            fields: {
                                IsActive: { editable: true, type: "boolean" },
                                Deleted: { editable: true, type: "boolean" },
                                Id: { editable: false, type: "number" }
                            }
                        }
                    },
                    requestEnd: function (e) {
                        if (e.type == "create" || e.type == "update") {
                            this.read();
                        }
                    },
                    error: function (e) {
                        console.log(e);
                        this.cancelChanges();
                    },
                    pageSize: 10,
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                toolbar: [
                    {
                        template: kendo.template('<a href="/Admin/User/AddOrEdit/0?userAgencyId=@Model.Id" class="btnDisableable btn btn-clear btn-sm"><i class="ki ki-plus icon-xs"></i> @T("Admin.Configuration.AddNew")</a>')
                    }
                ],
                pageable: {
                    refresh: true,
                    pageSizes: [10, 15, 20, 50, 100, 200, 300, 500, 1000, 3000],
                    @Html.Partial("_GridPagerMessages")
                },
                filterable: true,
                scrollable: false,
                columns: [
                    {
                        title: "@T("Admin.Configuration.Title")",
                        field: "Title",
                        template: '<a href="/admin/user/addoredit/#=Id#" class="btn btn-sm btn-link" title="Edit details"><i class="la la-edit"></i> #=FirstName# #=LastName# (#=EMail#)</a>',
                        filterable: false,
                    },
                    {
                        title: "@T("Admin.Configuration.UserType")",
                        field: "UserTypeName",
                        filterable: false,
                    },
                    {
                        field: "IsActive",
                        title: "@T("Admin.Configuration.IsActive")",
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: '# if(IsActive) {# <span class="btn btn-sm btn-success">@T("admin.configuration.true")</span> #} else {# <span class="btn btn-sm btn-danger">@T("admin.configuration.false")</span> #} #',
                        width: 80,
                    },
                    {
                        field: "Deleted",
                        title: "@T("Admin.Configuration.Deleted")",
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: '# if(Deleted) {# <span class="btn btn-sm btn-success">@T("admin.configuration.true")</span> #} else {# <span class="btn btn-sm btn-danger">@T("admin.configuration.false")</span> #} #',
                        width: 80,
                    },
                    {
                        field: "IsAgencyManager",
                        title: "@T("Admin.Configuration.IsAgencyManager")",
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: '# if(IsAgencyManager) {# <span class="btn btn-sm btn-success">@T("admin.configuration.true")</span> #} else {# <span class="btn btn-sm btn-danger">@T("admin.configuration.false")</span> #} #',
                        width: 80,
                    },
                    {
                        field: "IsAgencyStaff",
                        title: "@T("Admin.Configuration.IsAgencyStaff")",
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: '# if(IsAgencyStaff) {# <span class="btn btn-sm btn-success">@T("admin.configuration.true")</span> #} else {# <span class="btn btn-sm btn-danger">@T("admin.configuration.false")</span> #} #',
                        width: 80,
                    },
                    {
                        field: "Id",
                        title: "@T("admin.common.delete")",
                        width: 80,
                        filterable: false,
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: '<a href="javascript:void(0)" data-id="#=Id#" class="btn btn-sm btn-clean btn-icon btnDelete" title="Delete">\
                                        <i class="la la-trash"></i>\
                                    </a>'
                    }
                ]
            });
            $("body").on("click", "#user_datatable .btnDelete", function () {
                Swal.fire({
                    title: 'Eminmisiniz?',
                    text: "Kaydı silmek istediğiniz eminmisiniz?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Evet',
                    cancelButtonText: 'Hayır',
                    timer: 3000,
                    timerProgressBar: true
                }).then((result) => {
                    if (result.value) {
                        var id = $(this).attr("data-id");
                        console.log(id);
                        $.ajax({
                            type: "POST",
                            url: '/admin/user/AddOrEdit',
                            data: { id: id, delete: true },
                            success: function (data) {
                                userDatatable.data("kendoGrid").dataSource.read();
                                Swal.fire({
                                    title: 'Başarılı',
                                    icon: 'success',
                                    showCancelButton: false,
                                    showConfirmButton: false,
                                    timer: 1000,
                                    timerProgressBar: true
                                });
                            },
                            error: function (d) {
                                console.log(d);
                            }
                        });
                    }
                })
            });
        });
        function additionalData() {
            var data = {
                "UserAgencyId": @Model.Id,
                "Query": $("#User_Query").val(),
                "IsActive": $("#User_IsActive").val(),
                "Deleted": $("#User_Deleted").val()
            };
            addAntiForgeryToken(data);
            return data;
        }
        $('#btnSearch').click(function () {
            var grid = $('#user_datatable').data('kendoGrid');
            grid.dataSource.page(1);
            return false;
        });

        $('#btnAdd').click(function () {
            var _SkiResortId = $("#SkiResortId").val();
            var _HotelId = $("#HotelId").val();
            var _SkiSchoolId = $("#SkiSchoolId").val();
            var _RestaurantId = $("#RestaurantId").val();
            $.ajax({
                type: "POST",
                url: '/admin/UserAgencyAuthorization/AddOrEdit',
                data: { UserAgencyId: @Model.Id, SkiResortId: _SkiResortId, HotelId: _HotelId, SkiSchoolId: _SkiSchoolId, RestaurantId: _RestaurantId},
                success: function (data) {
                    Swal.fire({
                        title: 'Başarılı',
                        icon: 'success',
                        showCancelButton: false,
                        showConfirmButton: false,
                        timer: 1000,
                        timerProgressBar: true
                    });
                    var grid = $('#userAgencyAuthorization_datatable').data('kendoGrid');
                    grid.dataSource.page(1);
                    return false;
                },
                error: function (d) {
                    console.log(d);
                }
            });
        });
    </script>
}